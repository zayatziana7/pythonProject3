{"name": "test_successful_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 100\nCurrent browser version is 102.0.5005.115 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x00C97413+2389011]\n\tOrdinal0 [0x00C29F61+1941345]\n\tOrdinal0 [0x00B1C658+837208]\n\tOrdinal0 [0x00B3C773+968563]\n\tOrdinal0 [0x00B3837A+951162]\n\tOrdinal0 [0x00B35C51+941137]\n\tOrdinal0 [0x00B68C80+1150080]\n\tOrdinal0 [0x00B688DA+1149146]\n\tOrdinal0 [0x00B63F66+1130342]\n\tOrdinal0 [0x00B3E546+976198]\n\tOrdinal0 [0x00B3F456+980054]\n\tGetHandleVerifier [0x00E49632+1727522]\n\tGetHandleVerifier [0x00EFBA4D+2457661]\n\tGetHandleVerifier [0x00D2EB81+569713]\n\tGetHandleVerifier [0x00D2DD76+566118]\n\tOrdinal0 [0x00C30B2B+1968939]\n\tOrdinal0 [0x00C35988+1989000]\n\tOrdinal0 [0x00C35A75+1989237]\n\tOrdinal0 [0x00C3ECB1+2026673]\n\tBaseThreadInitThunk [0x7630FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x779D7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x779D7A6E+238]", "trace": "get_chrome_options = <selenium.webdriver.chrome.options.Options object at 0x000001E695E59000>\n\n    @pytest.fixture\n    def get_webdriver(get_chrome_options):\n        options = get_chrome_options\n>       driver = webdriver.Chrome(options=options)\n\nconftest.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nvenv\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:70: in __init__\n    super(WebDriver, self).__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\nvenv\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:93: in __init__\n    RemoteWebDriver.__init__(\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:268: in __init__\n    self.start_session(capabilities, browser_profile)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:359: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:424: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E695E58CD0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779D7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x779D7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 100\nE       Current browser version is 102.0.5005.115 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x00C97413+2389011]\nE       \tOrdinal0 [0x00C29F61+1941345]\nE       \tOrdinal0 [0x00B1C658+837208]\nE       \tOrdinal0 [0x00B3C773+968563]\nE       \tOrdinal0 [0x00B3837A+951162]\nE       \tOrdinal0 [0x00B35C51+941137]\nE       \tOrdinal0 [0x00B68C80+1150080]\nE       \tOrdinal0 [0x00B688DA+1149146]\nE       \tOrdinal0 [0x00B63F66+1130342]\nE       \tOrdinal0 [0x00B3E546+976198]\nE       \tOrdinal0 [0x00B3F456+980054]\nE       \tGetHandleVerifier [0x00E49632+1727522]\nE       \tGetHandleVerifier [0x00EFBA4D+2457661]\nE       \tGetHandleVerifier [0x00D2EB81+569713]\nE       \tGetHandleVerifier [0x00D2DD76+566118]\nE       \tOrdinal0 [0x00C30B2B+1968939]\nE       \tOrdinal0 [0x00C35988+1989000]\nE       \tOrdinal0 [0x00C35A75+1989237]\nE       \tOrdinal0 [0x00C3ECB1+2026673]\nE       \tBaseThreadInitThunk [0x7630FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x779D7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x779D7A6E+238]\n\nvenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:247: SessionNotCreatedException"}, "description": "Checking successful logIn", "start": 1655385924261, "stop": 1655385924261, "uuid": "479eb7a3-98f9-422e-b818-944d357e9e51", "historyId": "5543b98ed9fb89d288a55eb6f0891d9f", "testCaseId": "6a87cfafd63360957fcea228f682c780", "fullName": "test_case.test_authorization.TestAuthorization#test_successful_login", "labels": [{"name": "severity", "value": "blocker"}, {"name": "owner", "value": "Yana"}, {"name": "story", "value": "Authorization test cases"}, {"name": "tag", "value": "ui"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_authorization"}, {"name": "subSuite", "value": "TestAuthorization"}, {"name": "host", "value": "NB-SPB-A125"}, {"name": "thread", "value": "6748-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_authorization"}]}